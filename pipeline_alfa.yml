# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

#informazioni utili: 
#nella directory /home/gameDirectory1 ci sono i file di gioco per steam
#nella directory /home/gameDirectory2 ci sono i file di gioco per l'iso

#bisogna modificare il controllo del peso utilizando un bel if(directory) > 10GB ecc bisogna vedere la lezione in cui lo spiega a cassandra



trigger:
- *

pool:
  vmImage: ubuntu-latest
  demands:
  - npm
  - Directx

variables:
  buildConfiguration: 'Release'
  percorsoFile: '**/percorsofile'
  percorsoFileISO: '**/percorsoFileISO'
  percorsoReleasePrePublish: '**/releasePrePublish'
  percorsoReleaseSteam: '**/release/steam'
  percorsoReleaseIso: '**/release/dvd'
  pesoMassimo: 17GB

steps:
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- task: UseDotNet@2
  displayName: Use .NET SDK 5.x
  inputs:
    version: 5.x

- task: Npm@1
  displayName: Run npm install
  inputs:
    verbose: false

- task: Directx@1
  displayName: Install Directx
  inputs:
    verbose: false

- task: ControlloCoerenza@1
  displayName: Controllo Coerenza assets grafici
  workingDirectory: "$(percorsoFile)/assets/grafica"

- task: ControlloCoerenza@2
  displayName: Controllo Coerenza assets audio
  workingDirectory: "$(percorsoFile)/assets/audio"

#punto 2: build del gioco da eseguire dopo la prebuild e il controllo degli assets
- task: DotNetCoreCLI@2
  displayName: Build the project - Release
  inputs:
    command: build
    arguments: --no-restore --configuration Release --output "$(percorsoReleasePrePublish)"
    projects: '$(percorsoFile)'
  executionGroup: 1

# --> PUNTO 3a: 
#qua bisogna cercare su internet come leggere da un file e come fare if su pront per vedere se il peo va bene
#punto 3: controllo del peso del risultato dopo il controllo di coerenza (da fare in parallelo con il punto 6)
- script: find '$(percorsoReleasePrePublish)' -printf '%s'> infoPeso.txt
  displayName: acquisizione informazioni peso prima del Publish
- script: controlloPeso -fileDaControllare infoPeso.txt -pesoMassimo '$(pesoMassimo)'
  displayName: Controllo del peso della release






# --> PUNTO 4a: CREO IL FILE DI CONFIGURAZIONE .vdf PER STEAMCMD
#creo tramite script il file di configurazione configGame.vdf e lo inserisco nella cartella home/gamedirectory1/
- task: createSteamConfigFile@1
  displayName: Creare il file di configurazione
   script: printf "\"AppBuild\" \n   {
     \"AppID\" "1000" \n #l'app ID del gioco 
     \"Desc\" \n
     \"Config file for building the game\" \n #descrizione di questa build\\
     \"ContentRoot\" \"../home/gameDirectory1\" \n #root contenente la cartella relativa al gioco
     \"BuildOutput\" \"../home/outputGame/\" \n #cartella di build output per i build logs e build cache files
     \"Deports\"  {\"1001\" \n { \"FileMapping\" \n {
       \"LocalPath\" \"*\" \n #tutti i file dalla cartella contentroot
       \"DeportPath\" \".\" \n #mapped into the root of the deport
       \"recursive\" \"1\" \n }}}} " > /home/gamedirectory1/configGame.vdf #recursive include tutte le sottocartelle

# --> PUNTO 4b: INSTALLO STEAMWORK.SDK SUL SISTEMA
- task: InstallSteamworks@1
  displayName: Installare steamwork.sdk
   script: sudo apt install steamworks.sdk

# --> PUNTO 4c: CARICO IL GIOCO SU STEAM
#!!!!!ATTENZIONE!!!! questo comando va bene per windows ma non per linux cercare steamCMD per linux
#inserire anche le variabili di nome utente e password
- task: buildTheGameOnSteam
  displaName: carico il gioco
    script: tools\ContentBuilder\builder\steamcmd.exe + login <account_name> <password> + run_app_build ../home/gameDirectory1/configGame.vdf + quit
   








# --> PUNTO 5a: CREAZIONE DI UN ARTEFATTO ISO
#script che prende tutto quello che c'è nella directory /home/gameDirectory2 e lo mette in una ISO che chiama game.iso
- task: ArtifactISO@1
  displayName: Trasformazione del progetto in un artefatto .iso
   script: mkisofs -o game.iso /home/gameDirectory2  # --> mkisofs -o [nomefile.iso] [percorso_directory]

# --> PUNTO 5b: RELEASE DELL'ARTEFATTO ISO SU DVD
#vado a montare l'iso su una periferica DVD virtuale su ubuntu
#nel primo script vado a ceare una cartella in /media che sarà il nostro punto di mount
#nel secndo script vado a prendere la mia iso in /home/gamedirectory2/game.iso e la monto nel mount point crato prima media/iso
- task: MountISO@2
  displayName: Publish the project on DVD
    script: sudo mkdir /media/iso
    script: sudo mount -t iso9660 -o loop /home/gamedirectory2/game.iso /media/iso
  










#no bisogna pubblicare dopo il publish perchè altrimenti la pipeline si ferma ma il video è uscito
#punto 6: Pubblicazione video yt/ immagini su social media (da fare in parallelo con il punto 2)
- task: PubblicazioneTrailerVideo@1
  displayName: pubblicazione Trailer
  inputs:
    arguments: -credenziali '$(percorsoFile)'/MaterialePubblicitario/credenzialiYT.txt -video '$(percorsoFile)'/MaterialePubblicitario/VideoYT.mp4 -titolo '$(percorsoFile)'/MaterialePubblicitario/titolo.txt -descrizione '$(percorsoFile)'/MaterialePubblicitario/descrizioneVideo.txt
  executionGroup: 1

- task: PubblicazionePostInstagram@1
  displayName: pubblicazione Post
  inputs:
    arguments: -credenziali '$(percorsoFile)'/MaterialePubblicitario/credenzialiIG.txt -immagine '$(percorsoFile)'/MaterialePubblicitario/img.png -descrizione '$(percorsoFile)'/MaterialePubblicitario/descrizionePost.txt
  executionGroup: 1
