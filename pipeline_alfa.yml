# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  vmImage: windows-latest
  demands:
  - directx
  - steamworks
  - msbuild
  - visualstudio

#Dichiarazione delle variabili utilizzate nella pipeline
variables:
  percorsoPreBuild: '../DirectoryPreBuild'
  percorsoPostBuild: '../DirectoryPostBuild'

  buildConfiguration: 'Release'
  percorsoFileISO: '**/percorsoFileISO'
  
  numeroFilePNG: 3
  numeroFileJPG: 2
  numeroFileGIF: 6
  numeroFileDDS: 14
  numeroFIleMP3: 7
  numeroFileWav: 2

  account_name_steam: pinuzzo
  password_steam: "123456798"

  percorsoReleaseSteam: '**/release/steam'
  percorsoReleaseIso: '**/release/dvd'
  pesoMassimo: '17408'

  postTypeIG: post
  tagsPostIG: ''
  placePostIG: ''

  playlistVideoYT: samplePlaylist1
  familyFriendlyYT: true


#########   PROCESSO DI PREBUILD   #########

steps:
#installazione .NET
- task: UseDotNet@2
  displayName: Use .NET SDK 5.x
  inputs:
    packageType: sdk
    version: 5.x

#cambiare la politica di esecuzione in powershell
#- powershell: Set-ExecutionPolicy AllSigned
#  displayName: cambiare politica powershell in AllSigned

#installare Chocolatey sulla powershell
#- powershell: Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
#  displayName: installazione chocolately sulla powershell

#installazione di Directx
- powershell: choco install directx-sdk
  displayName: installare directx.sdk

#aggiunta VSBuild
- task: VSBuild@1
  inputs:
    solution: '**\*.sln' 
    vsVersion: 'latest'
    platform: 'x64'
    configuration: '$(buildConfiguration)'
    msbuildArchitecture: 'x64'
    logProjectEvents: true
    createLogFile: false
    logFileVerbosity: 'diagnostic'


#########   PROCESSO DI BUILD   #########

- task: DotNetCoreCLI@1
  displayName: Build the project - Release
  inputs:
    command: build
    arguments: --no-restore --configuration Release --output "$(percorsoPostBuild)"
    projects: '$(percorsoPreBuild)'

# build del gioco
- script: dotnet build --configuration $(buildConfiguration) --input $(percorsoPreBuild) --output $(percorsoPostBuild)
  displayName: dotnet build $(buildConfiguration)
  executionGroup: 1


#########   PROCESSO DI CONSISTENZA   #########

#controllo file .png
- powershell: Write-Host ("$(percorsoFile)"\assets\grafica *.png | measure).Count > ..\Users\counts\NumeroFilePNG.txt
  displayName: Conteggio e controllo numero file .png
  rules:
    if: 'cat ..\Users\counts\NumeroFilePNG.txt -eq "$(numeroFilePNG)"'
    when: always
#controllo file .jpg
- powershell: Write-Host ("$(percorsoFile)"\assets\grafica *.jpg | measure).Count > ..\Users\counts\NumeroFileJPG.txt
  displayName: Conteggio e controllo numero file .jpg
  rules:
    if: 'cat ..\Users\counts\NumeroFileJPG.txt -eq "$(numeroFileJPG)"'
    when: always
#controllo file .gif
- powershell: Write-Host ("$(percorsoFile)"\assets\grafica *.gif | measure).Count > ..\Users\counts\NumeroFileGIF.txt
  displayName: Conteggio e controllo numero file .gif
  rules:
    if: 'cat ..\Users\counts\NumeroFileGIF.txt -eq "$(numeroFileGIF)"'
    when: always
#controllo file .dds
- powershell: Write-Host ("$(percorsoFile)"\assets\grafica *.dds | measure).Count > ..\Users\counts\NumeroFileDDS.txt
  displayName: Conteggio e controllo numero file .dds
  rules:
    if: 'cat ..\Users\counts\NumeroFileDDS.txt -eq "$(numeroFileDDS)"'
    when: always
#controllo file .mp3
- powershell: Write-Host ("$(percorsoFile)"\assets\audio *.mp3 | measure).Count > ..\Users\counts\NumeroFileMP3.txt
  displayName: Conteggio e controllo numero file .mp3
  rules:
    if: 'cat ..\Users\counts\NumeroFileMP3.txt -eq "$(numeroFileMP3)"'
    when: always
#controllo file .wav
- powershell: Write-Host ("$(percorsoFile)"\assets\audio *.wav | measure).Count > ..\Users\counts\NumeroFileWAV.txt
  displayName: Conteggio e controllo numero file .wav
  rules:
    if: 'cat ..\Users\counts\NumeroFileWAV.txt -eq "$(numeroFileWAV)"'
    when: always


##########   FASE DI DEPLOY   #########

#installazione di steamcmd per la pubblicazione su steam
- powershell: choco install -y steamcmd
  displayName: Installare steamcmd
  inputs:
    verbose: true

#Pubblicazione su steam
#scrivo uno script che crea un file di testo chiamato infoPeso.txt dove inserisce in Byte il peso della directory /home/gamedirectory e controllo se il peso è minore del peso Massimo
- script: du -h '$(percorsoPreBuild)' -printf '%s'> infoPeso.txt
  displayName: acquisizione informazioni peso prima del Publish
  rules: 
    if: 'cat infoPeso.txt -lt "$(pesoMassimo)"'
    when: always

#creo tramite script il file di configurazione configGame.vdf e lo inserisco nella cartella home/gamedirectory/ che servirà per steamCMD
- script: echo -e '\"AppBuild\" \n   {
     \"AppID\" "1000" \n #l'app ID del gioco 
     \"Desc\" \n
     \"Config file for building the game\" \n #descrizione di questa build\\
     \"ContentRoot\" \"$(percorsoPreBuild)\" \n #root contenente la cartella relativa al gioco
     \"BuildOutput\" \"$(percorsoPostBuild)\" \n #cartella di build output per i build logs e build cache files
     \"Deports\"  {\"1001\" \n { \"FileMapping\" \n {

    \"LocalPath\" \"*\" \n #tutti i file dalla cartella contentroot
     \"DeportPath\" \".\" \n #mapped into the root of the deport
      \"recursive\" \"1\" \n }}}}  > "$(percorsoReleaseSteam)/configGame.vdf"' #recursive include tutte le sottocarteller
  displayName: Creare il file di configurazione
  executionGroup: 2

#inserire anche le variabili di nome utente e password
- script: tools\ContentBuilder\builder\steamcmd + login <"$(account_name_steam)"> <"$(password_steam)"> + run_app_build $(percorsoPreBuild)/configGame.vdf + quit
  displaName: carico il gioco
  executionGroup: 3

#Creazione artefatto ISO
#script che prende tutto quello che c'è nella directory $(percorsoPreBuild) e lo mette in una ISO che chiama game.iso
- script: mkisofs -o game.iso $(percorsoPreBuild)  # --> mkisofs -o [nomefile.iso] [percorso_directory]
  displayName: Trasformazione del progetto in un artefatto .iso
  executionGroup: 3


##########   FASE DI PUBBLICAZIONE AD   ##########

#punto 6: Pubblicazione video yt/ immagini su social media (da fare in parallelo con il punto 2)
- task: PubblicazioneTrailerVideo@1
  displayName: pubblicazione Trailer
  inputs:
    arguments: -credenziali '$(percorsoFile)'/MaterialePubblicitario/credenzialiYT.txt -video '$(percorsoFile)'/MaterialePubblicitario/VideoYT.mp4 -titolo '$(percorsoFile)'/MaterialePubblicitario/titolo.txt -descrizione '$(percorsoFile)'/MaterialePubblicitario/descrizioneVideo.txt -playlist '$(playlistVideoYT)' -familyFriendly '$(familyFriendlyYT)'
  executionGroup: 1

- task: PubblicazionePostInstagram@1
  displayName: pubblicazione Post
  inputs:
    arguments: -credenziali '$(percorsoFile)'/MaterialePubblicitario/credenzialiIG.txt -immagine '$(percorsoFile)'/MaterialePubblicitario/img.png -postType '$(postTypeIG)' -descrizione '$(percorsoFile)'/MaterialePubblicitario/descrizionePost.txt -tags $(tagsPostIG) -place $(placePostIG)
  executionGroup: 1
