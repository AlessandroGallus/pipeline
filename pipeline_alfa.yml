# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  vmImage: windows-latest
  demands:
  - directx
  - steamworks
  - msbuild
  - visualstudio
  - powerISO

#Dichiarazione delle variabili utilizzate nella pipeline
variables:
  percorsoPreBuild: '.\DirectoryPreBuild'
  percorsoPostBuild: '.\DirectoryPostBuild'

  buildConfiguration: 'Release'
  
  numeroFilePNG: '3'
  extensionPNG: "png"
  numeroFileGIF: '6'
  extensionGIF: "gif"
  numeroFileDDS: '4'
  extensionDDS: "dds"
  numeroFileMP3: '5'
  extensionMP3: "mp3"
  numeroFileWAV: '7'
  extensionWAV: "wav"

  account_name_steam: pinuzzo
  password_steam: "123456798"

  pesoMassimo: 5046586572

  postTypeIG: post
  tagsPostIG: ''
  placePostIG: ''

  playlistVideoYT: samplePlaylist1
  familyFriendlyYT: true


#########   PROCESSO DI PREBUILD   #########

steps:
#installazione .NET
- task: UseDotNet@2
  displayName: Use .NET SDK 5.x
  inputs:
    packageType: sdk
    version: 5.x

#aggiunta VSBuild
- task: VSBuild@1
  inputs:
    solution: '**\*.sln' 
    vsVersion: 'latest'
    platform: 'x64'
    configuration: '$(buildConfiguration)'
    msbuildArchitecture: 'x64'
    logProjectEvents: true
    createLogFile: false
    logFileVerbosity: 'diagnostic'

#installazione di Directx
- task: PowerShell@2
  inputs:
    targetType: inline
    script: choco install directx-sdk
    verbosePreference: stop
  displayName: installare directx.sdk

- task: DotNetCoreCLI@2
  displayName: Build the project - Release
  inputs:
    command: build
    arguments: --no-restore --configuration Release --output "$(percorsoPostBuild)"
    projects: '$(percorsoPreBuild)'


#########   PROCESSO DI CONSISTENZA   #########

#controllo file .png
- template: checkGrafic.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFilePNG)
    extension: $(extensionPNG)

#controllo file .gif
- template: checkGrafic.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFileGIF)
    extension: $(extensionGIF)

#controllo file .dds
- template: checkGrafic.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFileDDS)
    extension: $(extensionDDS)

#controllo file .mp3
- template: checkAudio.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFileMP3)
    extension: $(extensionMP3)

#controllo file .wav
- template: checkAudio.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFileWAV)
    extension: $(extensionWAV)


#########   PROCESSO DI BUILD   #########

# build del gioco
- script: dotnet build --configuration $(buildConfiguration) --input $(percorsoPreBuild) --output $(percorsoPostBuild)
  displayName: dotnet build $(buildConfiguration)
  executionGroup: 1


##########   FASE DI DEPLOY   #########

#creazione del programma shell per controllo dimensione
- powershell: |
      new-item checkDim.ps1 -type file -force -value '
      $output = (Get-ChildItem $(percorsoPreBuild)\ -recurse | measure Length -sum).sum
      if($output -gt $(pesoMassimo)){

        Write-Error "Dimension of directory is too big for an DVD"
        exit 1

      }'
  displayName: creazione dello script checkDim.ps1

#Controllo dimensione per caricamento su un DVD
- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(System.DefaultWorkingDirectory)\checkDim.ps1
  displayName: controllo dimensione per caricare su DVD

#download powerISO da choco
- powershell: choco install poweriso
  displayName: installazione di powerISO

#script per il download del runtime di DirectX per l'inserimento nel file ISO
- powershell: Invoke-WebRequest -Uri "https://www.microsoft.com/it-IT/download/confirmation.aspx?id=35" -OutFile "$(PercorsoPostBuild)\dxwebsetup.exe"
  displayName: download Directx runtime  

#Pubblicazione su steam
#download di steamworks_sdk per la pubblicazione su steam
- powershell: Invoke-WebRequest -Uri "https://partner.steamgames.com/downloads/steamworks_sdk_153a.zip" -OutFile ( New-Item -Path "$(System.DefaultWorkingDirectory)\steamsdk\steamworks_sdk_153a.zip" -Force )
  displayName: Download steamworks_sdk--

#unzip steamworks_sdk
- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: $(System.DefaultWorkingDirectory)\steamsdk\steamworks_sdk_153a.zip
    destinationFolder: $(System.DefaultWorkingDirectory)\steamsdk\
    cleanDestinationFolder: false

#copio i file del gioco in steamworks_sdk
- task: CopyFiles@2
  inputs:
    sourceFolder: $(percorsoPostBuild)
    contents: '**' 
    targetFolder: $(System.DefaultWorkingDirectory)\steamsdk\sdk\tools\ContentBuilder\content
    cleanTargetFolder: true

#pulire la directory prima di immettere gli script
- task: DeleteFiles@1
  inputs:
    SourceFolder: $(System.DefaultWorkingDirectory)\steamsdk\sdk\tools\ContentBuilder\scripts\
    Contents: '**/*'
  displayName: pulire la directory prima di immettere gli script

#creo primo script per steamworks_sdk
- powershell: |
    new-item $(System.DefaultWorkingDirectory)\steamsdk\sdk\tools\ContentBuilder\scripts\app_build_1946.vdf -type file -force -value '
    "AppBuild"
    {
      "AppID" "1946" // Your AppID
      "Desc" "Game of the YEAR" // internal description for this build
      "Preview" "1" // 0 nothing preview, 1 make this a preview build only, nothing is uploaded
      "Local" "" // put content on local content server instead of uploading to Steam
      "SetLive" "AlphaTest" // set this build live on beta branch AlphaTest
      "ContentRoot" "$(System.DefaultWorkingDirectory)\steamsdk\sdk\tools\ContentBuilder\content" // content root folder relative to this script file
      "BuildOutput" "$(System.DefaultWorkingDirectory)\steamsdk\build_output\" // put build cache and log files on different drive for better performance

      "Depots"
      {
        // file mapping instructions for each depot are in separate script files
        "19461" "depot_build_19461.vdf"
      }
    }'
  displayName: creo script App Build per steamworks_sdk

#creo secondo script per steamworks_sdk
- powershell: |
    new-item $(System.DefaultWorkingDirectory)\steamsdk\sdk\tools\ContentBuilder\scripts\depot_build_19461.vdf -type file -force -value '
    "DepotBuild"
    {
      // Set your assigned depot ID here
      "DepotID" "19461"

      // absolute path to your content folder
      "contentroot" "$(System.DefaultWorkingDirectory)\steamsdk\sdk\tools\ContentBuilder\content"

      // include all files recursivley
      "FileMapping"
      {
        // This can be a full path, or a path relative to ContentRoot
        "LocalPath" "*"

        // This is a path relative to the install folder of your game
        "DepotPath" "."

        // If LocalPath contains wildcards, setting this means that all
        // matching files within subdirectories of LocalPath will also
        // be included.
        "Recursive" "1"
      }
    }'
  displayName: creo script DeportBild per steamworks_sdk

#caricare il gioco
- script: '$(System.DefaultWorkingDirectory)\steamsdk\steamworks_sdk_153a\sdk\tools\ContentBuilder\builder\steamcmd.exe +login "$(account_name_steam)" "$(password_steam)" +run_app_build $(System.DefaultWorkingDirectory)\steamsdk\steamworks_sdk_153a\sdk\tools\ContentBuilder\scripts\app_build_1946.vdf +quit'
  displayName: carico il gioco su steam
  executionGroup: 2

#Creazione artefatto ISO
#script che prende tutto quello che c'Ã¨ nella directory $(percorsoPostBuild) e lo mette in una ISO che chiama game.iso
- script: '"c:\Program Files\PowerISO\piso.exe" create -o $(System.DefaultWorkingDirectory)\game.iso -add $(percorsoPostBuild) /'
  displayName: Trasformazione del progetto in un artefatto .iso
  executionGroup: 2


##########   FASE DI PUBBLICAZIONE AD   ##########

#punto 6: Pubblicazione video yt/ immagini su social media (da fare in parallelo con il punto 2)
- task: PubblicazioneTrailerVideo@1
  displayName: pubblicazione Trailer
  inputs:
    arguments:
     -credenziali '$(percorsoPostBuild)'/MaterialePubblicitario/credenzialiYT.txt -video '$(percorsoPostBuild)'/MaterialePubblicitario/VideoYT.mp4 -titolo '$(percorsoPostBuild)'/MaterialePubblicitario/titolo.txt -descrizione '$(percorsoPostBuild)'/MaterialePubblicitario/descrizioneVideo.txt -playlist '$(playlistVideoYT)' -familyFriendly '$(familyFriendlyYT)'
  executionGroup: 1

- task: PubblicazionePostInstagram@1
  displayName: pubblicazione Post
  inputs:
    arguments: -credenziali '$(percorsoPostBuild)'/MaterialePubblicitario/credenzialiIG.txt -immagine '$(percorsoPostBuild)'/MaterialePubblicitario/img.png -postType '$(postTypeIG)' -descrizione '$(percorsoPostBuild)'/MaterialePubblicitario/descrizionePost.txt -tags $(tagsPostIG) -place $(placePostIG)
  executionGroup: 1