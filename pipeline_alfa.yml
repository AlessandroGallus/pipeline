# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  vmImage: windows-latest
  demands:
  - directx
  - steamworks
  - msbuild
  - visualstudio
  - powerISO

#Dichiarazione delle variabili utilizzate nella pipeline
variables:
  percorsoPreBuild: '.\DirectoryPreBuild'
  percorsoPostBuild: '.\DirectoryPostBuild'

  buildConfiguration: 'Release'
  
  numeroFilePNG: '3'
  extensionPNG: "png"
  numeroFileGIF: '6'
  extensionGIF: "gif"
  numeroFileDDS: '4'
  extensionDDS: "dds"
  numeroFileMP3: '5'
  extensionMP3: "mp3"
  numeroFileWAV: '7'
  extensionWAV: "wav"

  account_name_steam: pinuzzo
  password_steam: "123456798"

  pesoMassimo: 4.7

  postTypeIG: post
  tagsPostIG: ''
  placePostIG: ''

  playlistVideoYT: samplePlaylist1
  familyFriendlyYT: true


#########   PROCESSO DI PREBUILD   #########

steps:
#installazione .NET
- task: UseDotNet@2
  displayName: Use .NET SDK 5.x
  inputs:
    packageType: sdk
    version: 5.x

#aggiunta VSBuild
- task: VSBuild@1
  inputs:
    solution: '**\*.sln' 
    vsVersion: 'latest'
    platform: 'x64'
    configuration: '$(buildConfiguration)'
    msbuildArchitecture: 'x64'
    logProjectEvents: true
    createLogFile: false
    logFileVerbosity: 'diagnostic'

#installazione di Directx
- task: PowerShell@2
  inputs:
    targetType: inline
    script: choco install directx-sdk
    verbosePreference: stop
  displayName: installare directx.sdk

- task: DotNetCoreCLI@2
  displayName: Build the project - Release
  inputs:
    command: build
    arguments: --no-restore --configuration Release --output "$(percorsoPostBuild)"
    projects: '$(percorsoPreBuild)'

#########   PROCESSO DI CONSISTENZA   #########

#controllo file .png
- template: checkGrafic.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFilePNG)
    extension: $(extensionPNG)

#controllo file .gif
- template: checkGrafic.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFileGIF)
    extension: $(extensionGIF)

#controllo file .dds
- template: checkGrafic.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFileDDS)
    extension: $(extensionDDS)

#controllo file .mp3
- template: checkAudio.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFileMP3)
    extension: $(extensionMP3)

#controllo file .wav
- template: checkAudio.yml
  parameters:
    percorsoPreBuild: $(percorsoPreBuild)
    numeroFile: $(numeroFileWAV)
    extension: $(extensionWAV)

#########   PROCESSO DI BUILD   #########

# build del gioco
- script: dotnet build --configuration $(buildConfiguration) --input $(percorsoPreBuild) --output $(percorsoPostBuild)
  displayName: dotnet build $(buildConfiguration)
  executionGroup: 1

##########   FASE DI DEPLOY   #########

#Pubblicazione su steam
#creazione del programma shell per controllo dimensione
- powershell: |
      new-item checkDim.ps1 -type file -force -value '
      $output = (Get-ChildItem $(percorsoPreBuild)\ -recurse | measure Length -sum).sum / 1GB
      if($output -gt $(pesoMassimo)){

        Write-Error "Dimension of directory is too big for an DVD"
        exit 1

      }'
  displayName: creazione dell shell program checkDim.ps1

#Controllo dimensione per caricamento su un DVD
- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(System.DefaultWorkingDirectory)\checkDim.ps1
  displayName: controllo dime per caricare su DVD

#installazione di steamcmd per la pubblicazione su steam
- powershell: choco install -y steamcmd
  displayName: Installare steamcmd
  inputs:
    verbose: true

#creo tramite script il file di configurazione configGame.vdf e lo inserisco nella cartella home/gamedirectory/ che servirà per steamCMD
- powershell: |
    new-item configSteamGame.vdf -type file -force -value '
    "AppBuild"
    {
      "AppID" "1000" // your AppID
      "Desc" "a build script for a game" // internal description for this build

      "ContentRoot" "$(percorsoPostBuild)\" // root content folder, relative to location of this file
      "BuildOutput" ".\logs\" // build output folder for build logs and build cache files

      "Depots"
      {
        "1001" // your DepotID
        {
          "FileMapping"
          {
            "LocalPath" "*" // all files from contentroot folder
            "DepotPath" "." // mapped into the root of the depot
            "recursive" "1" // include all subfolders
          }
        }
      }
    }'
  displayName: Creare il file di configurazione per steamCMD

#script per il download del runtime di DirectX per l'inserimento nel file ISO
- powershell: Invoke-WebRequest -Uri "https://www.microsoft.com/it-IT/download/confirmation.aspx?id=35" -OutFile "$(PercorsoPostBuild)\dxwebsetup.exe"
  displayName: download Directx runtime

#caricare il gioco
- script: tools\ContentBuilder\builder\steamcmd.exe + login <"$(account_name_steam)"> <"$(password_steam)"> + run_app_build $(percorsoPostBuild)/configGame.vdf + quit
  displaName: carico il gioco su steam
  executionGroup: 2

#Creazione artefatto ISO

#download powerISO da choco
- powershell: choco install poweriso
  displayName: installazione di powerISO

#script che prende tutto quello che c'è nella directory $(percorsoPostBuild) e lo mette in una ISO che chiama game.iso
- script: "c:\Program Files\PowerISO\piso.exe" create -o $(System.DefaultWorkingDirectory)\game.iso -add $(percorsoPostBuild) /
  displayName: Trasformazione del progetto in un artefatto .iso
  executionGroup: 2


##########   FASE DI PUBBLICAZIONE AD   ##########

#punto 6: Pubblicazione video yt/ immagini su social media (da fare in parallelo con il punto 2)
- task: PubblicazioneTrailerVideo@1
  displayName: pubblicazione Trailer
  inputs:
    arguments: -credenziali '$(percorsoPostBuild)'/MaterialePubblicitario/credenzialiYT.txt -video '$(percorsoPostBuild)'/MaterialePubblicitario/VideoYT.mp4 -titolo '$(percorsoPostBuild)'/MaterialePubblicitario/titolo.txt -descrizione '$(percorsoPostBuild)'/MaterialePubblicitario/descrizioneVideo.txt -playlist '$(playlistVideoYT)' -familyFriendly '$(familyFriendlyYT)'
  executionGroup: 1

- task: PubblicazionePostInstagram@1
  displayName: pubblicazione Post
  inputs:
    arguments: -credenziali '$(percorsoPostBuild)'/MaterialePubblicitario/credenzialiIG.txt -immagine '$(percorsoPostBuild)'/MaterialePubblicitario/img.png -postType '$(postTypeIG)' -descrizione '$(percorsoPostBuild)'/MaterialePubblicitario/descrizionePost.txt -tags $(tagsPostIG) -place $(placePostIG)
  executionGroup: 1